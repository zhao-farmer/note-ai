import{_ as s,c as a,o as t,a0 as l}from"./chunks/framework.DqNHTjo5.js";const p="/note-ai/code/tool/copilot/001.png",n="/note-ai/code/tool/copilot/002.png",h="/note-ai/code/tool/copilot/003.png",e="/note-ai/code/tool/copilot/004.png",o="/note-ai/code/tool/copilot/005.png",C=JSON.parse('{"title":"使用 GitHub Copilot","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/code/tool/copilot/01.md","filePath":"markdown/code/tool/copilot/01.md"}'),k={name:"markdown/code/tool/copilot/01.md"};function d(r,i,c,E,g,y){return t(),a("div",null,i[0]||(i[0]=[l('<h1 id="使用-github-copilot" tabindex="-1">使用 GitHub Copilot <a class="header-anchor" href="#使用-github-copilot" aria-label="Permalink to &quot;使用 GitHub Copilot&quot;">​</a></h1><p>GitHub Copilot 是由 GitHub 和 OpenAI 联合开发的 AI 编码助手，能够基于上下文自动补全代码、生成函数、优化逻辑，甚至是编写整段的代码模块，帮助开发者更高效地编码。</p><p>GitHub Copilot 集成在 VS Code、Visual Studio、JetBrains 等多种 IDE 中，让你在写代码时感觉仿佛有一位经验丰富的搭档随时协助你。</p><h2 id="_1-核心功能" tabindex="-1">1. 核心功能 <a class="header-anchor" href="#_1-核心功能" aria-label="Permalink to &quot;1. 核心功能&quot;">​</a></h2><ol><li><p>代码自动补全</p><p>GitHub Copilot 能够根据你的代码上下文和注释，实时提供代码建议。它可以：</p><ul><li>补全整行代码</li><li>生成完整函数</li><li>根据描述性注释生成代码</li></ul></li><li><p>代码解释</p><p>Copilot 可以帮助你理解不熟悉的代码：</p><ul><li>解释复杂代码段的功能</li><li>提供代码优化建议</li><li>识别潜在问题</li></ul></li><li><p>多语言支持</p><p>支持几乎所有主流编程语言，包括：</p><ul><li>JavaScript/TypeScript</li><li>Python</li><li>Java</li><li>C++</li><li>Go</li><li>Ruby 等</li></ul></li></ol><h2 id="_2-安装与设置" tabindex="-1">2. 安装与设置 <a class="header-anchor" href="#_2-安装与设置" aria-label="Permalink to &quot;2. 安装与设置&quot;">​</a></h2><ol><li><p>vscode 已经默认安装了GitHub Copilot，如果没有这个小图标，请更新到最新版本</p><p><img src="'+p+'" alt="" data-fancybox="gallery"></p></li><li><p>安装后，打开 VS Code 的设置，搜索 Copilot,在这里我们可以在 VS Code</p><p><img src="'+n+`" alt="" data-fancybox="gallery"></p></li></ol><h2 id="_3-使用技巧" tabindex="-1">3. 使用技巧 <a class="header-anchor" href="#_3-使用技巧" aria-label="Permalink to &quot;3. 使用技巧&quot;">​</a></h2><ol><li><p>智能补全</p><p>当你开始输入代码时，GitHub Copilot 会自动给出建议:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copilot 会自动给出一个基于 fetch API 的实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+h+'" alt="" data-fancybox="gallery"></p><p>我们可以按下 Tab 键接受建议。</p><ul><li><p>如果有多种建议，可按 <code>Ctrl + ]</code> 或 <code>Ctrl + [</code> 切换。</p></li><li><p>如果不想使用建议，按 Esc 取消。</p></li></ul></li><li><p>基于注释生成代码</p><p>直接写注释，Copilot 会帮你实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实现一个java快速排序算法</span></span></code></pre></div><p><img src="'+e+`" alt="" data-fancybox="gallery"></p></li><li><p>生成测试用例</p><ul><li><p>你甚至可以直接写注释让 Copilot 帮你生成测试：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为 quicksort 函数生成单元测试</span></span></code></pre></div></li><li><p>生成后代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为 quicksort 函数生成单元测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.junit.jupiter.api.Assertions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QuickSortTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testQuickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        QuickSort.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quickSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertArrayEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li><li><p>快捷键说明：</p><table tabindex="0"><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td><code>Tab </code></td><td>接受建议</td></tr><tr><td><code>Esc </code></td><td>忽略建议</td></tr><tr><td><code>Ctrl + ] </code></td><td>查看下一个建议</td></tr><tr><td><code>Ctrl + [ </code></td><td>查看上一个建议</td></tr><tr><td><code>Ctrl + Enter </code></td><td>打开 Copilot 面板</td></tr><tr><td><code>Ctrl + Shift + P</code></td><td>启用/禁用 Copilot</td></tr></tbody></table></li></ol><h2 id="_4-在-vs-code-中使用聊天功能" tabindex="-1">4. 在 VS Code 中使用聊天功能 <a class="header-anchor" href="#_4-在-vs-code-中使用聊天功能" aria-label="Permalink to &quot;4. 在 VS Code 中使用聊天功能&quot;">​</a></h2><ol><li><p>介绍 在 Visual Studio Code 中使用聊天功能，可以通过自然语言询问有关代码库的问题，或者在项目中进行多文件编辑。聊天功能可以根据你的需求在不同的模式下运行，从提问、进行多文件编辑到启动代理式编码工作流，都能满足你的需求。</p><p>你可以在以下场景中使用 VS Code 的聊天功能：</p><ul><li>理解代码：例如，&quot;解释这个身份验证中间件是如何工作的？&quot;</li><li>调试问题：例如，&quot;为什么我在这个循环中得到一个空引用？&quot;</li><li>获取代码建议：例如，&quot;展示如何用 Python 实现二叉搜索树？&quot;</li><li>优化性能：例如，&quot;帮我提高这个数据库查询的效率？&quot;</li><li>学习最佳实践：例如，&quot;处理异步函数中的错误有什么推荐的方法？&quot;</li><li>获取 VS Code 小贴士：例如，&quot;如何自定义键盘快捷键？&quot;</li></ul><blockquote><p>提示：如果你还没有 Copilot 订阅，可以通过注册 Copilot 免费计划来免费使用 Copilot，每月有限制的补全和聊天交互次数。</p></blockquote></li><li><p>聊天模式</p></li></ol><p>根据你的具体需求，你可以选择不同的聊天模式：</p><table tabindex="0"><thead><tr><th>模式</th><th>描述</th><th>场景</th></tr></thead><tbody><tr><td>提问 (Ask)</td><td>询问有关代码库或技术概念的问题。</td><td>在稳定版或预览版中打开。理解代码片段的工作原理、头脑风暴软件设计想法或探索新技术。</td></tr><tr><td>编辑 (Edit)</td><td>在代码库中进行多文件编辑。</td><td>在稳定版或预览版中打开。直接在项目中应用代码编辑，用于实现新功能、修复错误或重构代码。</td></tr><tr><td>代理 (Agent)</td><td>启动代理式编码工作流。</td><td>在稳定版或预览版中打开。在极少的指导下，自主实现新功能或项目的高级需求，调用工具执行专业任务，并在出现问题时迭代解决。</td></tr></tbody></table><p>通过在聊天视图中使用模式下拉菜单，可以在不同的聊天模式之间切换。</p><p><img src="`+o+'" alt="" data-fancybox="gallery"></p>',15)]))}const b=s(k,[["render",d]]);export{C as __pageData,b as default};
