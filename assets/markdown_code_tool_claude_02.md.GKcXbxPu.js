import{_ as e}from"./chunks/008.ButlBZmP.js";import{_ as l,c as t,o as s,a0 as o}from"./chunks/framework.DqNHTjo5.js";const i="/note-ai/code/tool/claude/007.png",d="/note-ai/code/tool/claude/009.png",p="/note-ai/code/tool/claude/010.png",n="/note-ai/code/tool/claude/011.png",c="/note-ai/code/tool/claude/012.png",u="/note-ai/code/tool/claude/013.png",r="/note-ai/code/tool/claude/014.png",h="/note-ai/code/tool/claude/015.png",f=JSON.parse('{"title":"二、Claude Code 应用","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/code/tool/claude/02.md","filePath":"markdown/code/tool/claude/02.md"}'),C={name:"markdown/code/tool/claude/02.md"};function g(m,a,b,v,k,_){return s(),t("div",null,a[0]||(a[0]=[o('<h1 id="二、claude-code-应用" tabindex="-1">二、Claude Code 应用 <a class="header-anchor" href="#二、claude-code-应用" aria-label="Permalink to &quot;二、Claude Code 应用&quot;">​</a></h1><h2 id="_2-1-自然语言输入" tabindex="-1">2.1 自然语言输入 <a class="header-anchor" href="#_2-1-自然语言输入" aria-label="Permalink to &quot;2.1 自然语言输入&quot;">​</a></h2><p>在使用 Claude Code 时有一些提升便捷性和功能性的操作，不仅可以通过输入框进行对话式问答，还可以输入内置命令、shell命令、使用编译器运行等多种方式实现效果。</p><p>​ 在初体验使用Claude Code的时候，首先可以仅仅通过自然语言输入你的问题。Claude内置了很多的工具，并且可以通过理解自然语言自动调用工具实现。接下来进行两个任务测试：</p><p>读取工作目录下一个项目文件，并生成一份项目分析报告 从零开始创建一个简单项目（复杂项目会消耗巨量的token，并且由于并不是使用的原生Claude模型，所以效果并不是很好）</p><h3 id="_2-1-1-通过自然语言生成项目分析报告" tabindex="-1">2.1.1 通过自然语言生成项目分析报告 <a class="header-anchor" href="#_2-1-1-通过自然语言生成项目分析报告" aria-label="Permalink to &quot;2.1.1 通过自然语言生成项目分析报告&quot;">​</a></h3><ol><li><p>输入命令</p><ul><li><p>打开 claude code</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span></span></code></pre></div></li></ul></li><li><p>分析pixi游戏项目</p><ul><li><p>输入命令</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">windows系统下 将 E:\\study\\website\\pixi-test 这个地址设置为你的工作目录,然后在此目录下生成一个分模块详细分析的项目说明文档</span></span></code></pre></div></li><li><p>询问是否允许操作</p><p><img src="'+i+'" alt="" data-fancybox="gallery"></p></li><li><p>分析结果(只能说NB)</p><p><img src="'+e+'" alt="" data-fancybox="gallery"></p></li></ul></li></ol><h3 id="_2-1-2-从零开始创建简单项目" tabindex="-1">2.1.2 从零开始创建简单项目 <a class="header-anchor" href="#_2-1-2-从零开始创建简单项目" aria-label="Permalink to &quot;2.1.2 从零开始创建简单项目&quot;">​</a></h3><ol start="2"><li><p>创建项目</p><ol><li><p>通过一个简单的工作路径添加命令传入工作目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/add-dir &lt;你的工作目录&gt;</span></span></code></pre></div></li><li><p>输入指令，输入后开始执行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在此工作目录下创建一个使用JavaScript编写的简单的计时器程序，要求交互界面，可以一键运行</span></span></code></pre></div></li><li><p>在一段等待时间之后，其完成了该任务，创建了一个前端页面</p><p><img src="'+d+'" alt="" data-fancybox="gallery"></p></li><li><p>允许结果</p><p><img src="'+p+'" alt="" data-fancybox="gallery"></p></li></ol></li></ol><h2 id="_2-2-命令行输入" tabindex="-1">2.2 命令行输入 <a class="header-anchor" href="#_2-2-命令行输入" aria-label="Permalink to &quot;2.2 命令行输入&quot;">​</a></h2><p>​ Claude Code 是 Anthropic 推出的终端 AI 编码助手，在交互界面中通过 斜杠命令（Slash Commands）来控制 AI 助手的行为和上下文，合理使用斜杠命令，配合自然语言输入更加顺利完成开发操作。</p><p><img src="'+n+'" alt="" data-fancybox="gallery"></p><h3 id="_2-2-1-calude-code-执行初始化命令" tabindex="-1">2.2.1 Calude Code 执行初始化命令 <a class="header-anchor" href="#_2-2-1-calude-code-执行初始化命令" aria-label="Permalink to &quot;2.2.1 Calude Code 执行初始化命令&quot;">​</a></h3><p>​ 在使用Claude Code的时候，一般都会首先添加工作目录。这里一般通过一个斜杠： <code>/</code>来表示输入指令。</p><ul><li>/add-dir - 指令选定工作目录</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/add-dir &lt;你的工作目录&gt;</span></span></code></pre></div><p>​ 在创建工作目录后，使用初始化工具对该目录下的项目进行初始化分析，生成一份CLAUDE.md文档。这个文档的作用是建立上下文，让Claude Code理解当前项目的目标和结构、设置代码风格和一些规则、设置Claude Code的角色。可以在进行初始化之后通过自然语言输入让其修改该初始化说明文档，进而实现所需的设定</p><p>现在来到一个已完成的项目下，通过 <code>/init</code>完成项目分析的初始化</p><ul><li>/init – 初始化项目记忆指南</li></ul><p>定义与语法： /init 无参数。运行此命令会扫描当前项目代码库，在项目根目录生成一个 CLAUDE.md 文件，作为该项目的知识指南。CLAUDE.md 通常包含项目结构摘要、主要模块说明、依赖列表等内容。</p><p>使用场景： 建议首次在新项目中使用 Claude Code时立即执行 /init。这样Claude会自动了解项目的大概结构和背景，相当于给Claude这个AI同事一本项目手册。/init 生成的 CLAUDE.md 可由Claude根据代码自动提取要点，你也可以在Claude的帮助下完善它——比如询问 “请列出项目架构的关键部分写入 CLAUDE.md” 等。完成后，将 CLAUDE.md 保存（甚至提交进仓库共享给团队）。之后每次在该项目目录启动Claude Code，它都会首先读取 CLAUDE.md，拥有持久的项目信息。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/init</span></span></code></pre></div><p><img src="'+c+'" alt="" data-fancybox="gallery"></p><h3 id="_2-2-2-claude-code-执行其他命令" tabindex="-1">2.2.2 Claude Code 执行其他命令 <a class="header-anchor" href="#_2-2-2-claude-code-执行其他命令" aria-label="Permalink to &quot;2.2.2 Claude Code 执行其他命令&quot;">​</a></h3><p>​在使用Claude Code时,还有很多其他的命令，这里输入</p><ul><li>/help – 查看命令列表</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/help</span></span></code></pre></div><p>​</p><ul><li>/clear – 清除对话历史</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/clear</span></span></code></pre></div><p>定义与语法： /clear 无参数。用于清除当前会话的对话历史，使 Claude 忘记之前的所有对话内容。执行后，相当于开启一个新会话，但不会退出 Claude Code 界面。</p><p>使用场景： 当对话持续很久、上下文累积过多时，可以使用 /clear 来重置上下文窗口，保持思路清晰。例如在完成一个独立任务后，开始新任务前执行 /clear，Claude 将从空上下文开始理解你的下一指令。这在任务切换时非常有用，可以避免旧话题干扰新需求。此外，当Claude的回答出现偏离正轨或上下文混乱时，/clear 可以一键“重启”对话。</p><ul><li>/compact – 压缩对话内容</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/compact</span></span></code></pre></div><p>定义与语法： /compact [instructions] 可选附加“指令”参数。此命令会将当前对话历史总结压缩，并以该摘要作为新对话的开场上下文。可选的 instructions 参数允许你指定压缩时的侧重点，例如 /compact &quot;保留尚未解决的问题&quot; 会让 Claude 在总结时侧重未解决问题部分。</p><p>使用场景： 当会话长度接近模型上下文长度上限时，/compact 是延续长对话的救星。Claude 会将已有对话自动总结为更短的内容，从而释放大量上下文令牌供后续交流使用。这类似于有个 AI 秘书在会议途中帮你记录会议纪要，确保你们不会因为对话太长而“忘记”前情。不过，与 /clear 不同，/compact 保留了上下文的精华——在新会话中Claude仍可以参考之前对话的摘要继续讨论。</p><ul><li>/memory – 编辑会话记忆文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/memory</span></span></code></pre></div><p>定义与语法： /memory 无参数。用于直接打开并编辑当前项目的持久记忆文件 CLAUDE.md（或用户级别的全局记忆文件），方便查看和修改 Claude 的“长期记忆”。你也可以通过这个命令向 CLAUDE.md 添加或移除内容。</p><p>使用场景： CLAUDE.md 是 Claude Code 用于初始化上下文的指南文件，通常包含项目简介、架构要点、代码惯例等。通过 /memory 命令，你可以随时更新该文件的内容：比如在初始化项目后发现 CLAUDE.md 漏掉了一些关键业务术语解释，可以输入 /memory 打开文件，在其中添加术语解释列表并保存。保存退出后，可以 /clear 然后开始新会话，Claude 将自动参照更新后的 CLAUDE.md 来回答问题，减少对术语的误解。</p><ul><li>/status – 会话状态检查</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/status</span></span></code></pre></div><p>定义与语法： /status 无参数。显示当前 Claude Code 会话和系统状态，包括工作目录、登录账户、所用模型、加载的项目记忆等。这是一条只读命令，不会更改任何设置。</p><p>使用场景： 当你需要确认当前环境时（例如切换目录后不确定Claude是否跟随了新项目，或刚切换模型后想验证当前模型名），/status 可以立刻给出答案。它也是排查问题的起点：如果Claude行为异常，先看一下 /status 是否仍指向正确的路径和模型，是否有正确加载 CLAUDE.md 等。</p><ul><li>/cost – 令牌与费用统计</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/cost</span></span></code></pre></div><p>定义与语法： /cost 无参数。用于显示当前会话的令牌使用量统计，包括提示和回答分别用了多少 token，以及预估的 API 消耗费用。这对掌控 Claude Code 的使用成本非常有帮助。</p><p>使用场景： 如果你使用按量计费的API密钥或免费额度，随时关注对话的 token 消耗情况是个好习惯。执行 /cost 可以让你了解目前这场对话累计用了多少 token，并据此估算花费。在长时间编程会话或密集代码生成功能中，偶尔检查 /cost 有助于及时止损：发现token飙升可以选择提问更具体、压缩上下文等节约开销。另外，当你打算结束当天工作时，可以用 /cost 获取会话用量总结，核对是否在预算之内。</p><ul><li>/config – 查看或修改配置</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/config</span></span></code></pre></div><p>定义与语法： /config 可交互式查看和修改 Claude Code 配置参数。执行命令会显示配置菜单，你可以根据提示修改设置，例如启用/禁用自动压缩、设置主题、切换编辑模式等。部分配置也支持通过子命令直接设置，比如 /config set autocompact off 等。</p><p>使用场景： Claude Code 提供许多可定制选项，通过 /config 你可以根据个人习惯进行调整。例如：Autocompact（自动压缩）默认开启以防止上下文溢出，通常建议保持开启；待办事项（to-do）功能可以让Claude Code在长任务中列步骤，你可在配置中启用/停用；verbose输出用于调试，可通过 /config 打开，当需要看Claude内部推理步骤时很有用（对应快捷键 Ctrl+R 切换verbose模式）；还有主题配色、通知方式（如终端铃声提醒Claude完成思考）、编辑模式等。总之，/config 是你的个性化Claude控制面板。</p><ul><li>/model – 切换AI模型版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/model</span></span></code></pre></div><p>定义与语法： /model [model_name]。不带参数时通常会显示当前使用的模型，并提示可选模型列表；指定参数则可切换Claude所用的AI模型。Claude Code 常用的模型代号包括 Sonnet（较快、上下文较短）和 Opus（较慢但能力更强、上下文长度更大）等，或具体版本如 claude-4-100k 等。</p><p>使用场景： 根据任务需要选择合适的模型，能在速度和质量间取得平衡。默认情况下Claude Code启动用的是较快的模型（截至2025年一般是 Sonnet 系列，如 claude-3.7-sonnet-xxxx）。当你需要更深入的分析、更大的上下文或更高准确度时，可以通过 /model opus 切换到能力更强的模型。例如复杂架构设计讨论、批量代码重构等场景，Opus模型（类似GPT-4之于GPT-3.5的角色）会表现更佳。而在简单问答或需要快速响应的场景下，继续使用Sonnet模型更高效。/model 让你动态调整AI助手的大脑，以匹配任务要求。</p><ul><li>/doctor – 环境健康检查</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/doctor</span></span></code></pre></div><p>定义与语法： /doctor 无参数。执行后Claude Code会检查当前安装环境的健康状态，验证所需依赖和权限是否正确配置，并报告潜在问题。</p><p>使用场景： 当Claude Code行为异常（比如无法读取文件、工具调用总是失败等），/doctor 是排查问题的第一步。它会自动检查：Anthropic API连通性、已登录账户有效性、必需的依赖（git、GitHub CLI、ripgrep等）是否安装、Claude Code所需的文件权限是否授予等等。检查完后会输出一份报告，指出哪些项目通过，哪些存在问题。例如 “✘ 未检测到 GitHub CLI，请安装以使用 PR 功能” 或 “⚠ 当前Anthropic API凭据无效” 等。有了这些信息，你可以据此修复环境，然后重试之前的操作。</p><h3 id="_2-2-3-claude-code进阶技巧" tabindex="-1">2.2.3 Claude Code进阶技巧 <a class="header-anchor" href="#_2-2-3-claude-code进阶技巧" aria-label="Permalink to &quot;2.2.3 Claude Code进阶技巧&quot;">​</a></h3><p>善用以上斜杠命令不仅在各自场景下提升效率，更可以串联起来，形成流畅的工作流。下面通过一个实际开发流程，展示如何组合命令完成复杂任务：</p><p>场景： 你接手一个新项目，需要先熟悉代码，再开发新功能，最后提交PR并做审查。使用Claude Code，你计划如下操作：</p><p>**初始化项目记忆：**进入项目目录，启动 Claude Code 后，首先运行 /init 创建 CLAUDE.md 项目指南。这样Claude对项目有基本认识。接着你询问 “&gt; summarize this project”，Claude很快给出代码库概览，得益于刚生成的记忆文件提供的上下文。 **配置模型与权限：**你发现默认模型对架构问题思考稍显吃力，于是输入 /model opus 切换到更强大的模型，以更好理解复杂代码结构。 **编写代码与反馈：**在Claude的协助下，你开始编写新功能代码。Claude 直接在终端提议修改文件并执行了编辑。过程中会话变长，你适时使用 /compact &quot;保留新功能相关讨论&quot; 将上下文压缩，让Claude聚焦当前任务。当一个模块修改完成，你又用 /clear 清理对话历史，针对下一个模块重新开始，确保Claude不被上一部分内容干扰。</p><p><strong>代码功能完善</strong></p><p><strong>代码性能分析和优化</strong></p><p>通过以上步骤可以看到，Claude Code 的斜杠命令配合自然语言输入，可以贯穿开发全流程：从环境准备、到编码调试、再到功能完善，以及最后的性能分析和优化，每一步都有相应的操作支持。灵活地组合运用命令和自然语言输入，能把重复繁杂的操作交给AI处理，开发者则专注于高层逻辑，实现真正的人机协作高效编程。</p><h2 id="_2-3-集成ide" tabindex="-1">2.3 集成IDE <a class="header-anchor" href="#_2-3-集成ide" aria-label="Permalink to &quot;2.3 集成IDE&quot;">​</a></h2><h3 id="_2-3-1-集成概述" tabindex="-1">2.3.1 集成概述 <a class="header-anchor" href="#_2-3-1-集成概述" aria-label="Permalink to &quot;2.3.1 集成概述&quot;">​</a></h3><ul><li><p>Claude Code 除了自然语言输入和默认的命令行交互方式外，还支持与流行的集成开发环境 (IDE) 集成。这种集成后，我们可以直接在主流的IDE 编辑器中使用<code>Claude Code</code> 的功能。</p></li><li><p><strong>Claude Code 目前支持两个主要的 IDE 系列：</strong></p></li></ul><p>​ Visual Studio Code（包括 Cursor、Windsurf 等）</p><p>​ JetBrains IDEs（包括 PyCharm、WebStorm、IntelliJ 等）</p><h3 id="_5-2-接入-visual-studio-code" tabindex="-1">5.2 接入 Visual Studio Code <a class="header-anchor" href="#_5-2-接入-visual-studio-code" aria-label="Permalink to &quot;5.2 接入 Visual Studio Code&quot;">​</a></h3><ol><li><p>安装并打开 VSCode （版本需要在 1.98.0+）</p></li><li><p>搜索并安装插件: <code>Claude Code for VSCode</code></p></li></ol><p><img src="'+u+'" alt="" data-fancybox="gallery"></p><ol start="3"><li>安装之后，你的 Cursor 右上角会出现 Claude Code 的图标</li></ol><p><img src="'+r+'" alt="" data-fancybox="gallery"></p><ol start="4"><li>在ide中中输入命令后，修改的数据回在ide中显示</li></ol><p><img src="'+h+'" alt="" data-fancybox="gallery"></p>',79)]))}const A=l(C,[["render",g]]);export{f as __pageData,A as default};
