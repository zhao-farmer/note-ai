import{_ as t,c as r,o as a,a0 as s}from"./chunks/framework.DqNHTjo5.js";const i="/note-ai/code/tool/cursor/001.png",e="/note-ai/code/tool/cursor/002.png",n="/note-ai/code/tool/cursor/003.png",l="/note-ai/code/tool/cursor/004.png",d="/note-ai/code/tool/cursor/005.png",p="/note-ai/code/tool/cursor/006.png",b=JSON.parse('{"title":"一、Cursor概述、安装以及环境配置","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/code/tool/cursor/01.md","filePath":"markdown/code/tool/cursor/01.md"}'),u={name:"markdown/code/tool/cursor/01.md"};function c(g,o,h,C,k,m){return a(),r("div",null,o[0]||(o[0]=[s('<h1 id="一、cursor概述、安装以及环境配置" tabindex="-1">一、Cursor概述、安装以及环境配置 <a class="header-anchor" href="#一、cursor概述、安装以及环境配置" aria-label="Permalink to &quot;一、Cursor概述、安装以及环境配置&quot;">​</a></h1><h2 id="_1-1-概述" tabindex="-1">1.1 概述 <a class="header-anchor" href="#_1-1-概述" aria-label="Permalink to &quot;1.1 概述&quot;">​</a></h2><p>Cursor 是一款功能强大的 AI 优先代码编辑器，可增强我们的开发工作流程。主要提供三个核心方向，这些功能可以无缝地协同工作，从而提高工作效率：</p><ul><li>深度集成AI模型，不是简单地接入模型，而是让AI充当了编译器的核心交互方式。支持代码块对话、项目级对话、模型自由选择。</li><li>强上下文理解能力，可以自动识别项目文件、代码块、错误信息等等，提供更直观准确的AI修改能力。</li><li>对话式开发体验，仅需用自然语言沟通，Cursor就会根据指令完成布置的任务，使用者可以轻松扮演产品经理，让Cursor理解你的命令自行工作。</li></ul><p><img src="'+i+'" alt="" data-fancybox="gallery"></p><p><strong>对比其他编辑工具来说：</strong></p><ul><li>对比VS Code : 基于Visual Studio Code打造而成的AI编程工具，因此界面和基础操作与 VS Code 高度相似，无缝衔接！</li><li>对比 JetBrains IDEA：Cursor 提供 AI 驱动的现代编码体验，可以取代 JetBrains IDE，JetBrains 程序员可能会感觉不同！</li></ul><h2 id="_1-2-安装、登录和无限续杯" tabindex="-1">1.2 安装、登录和无限续杯 <a class="header-anchor" href="#_1-2-安装、登录和无限续杯" aria-label="Permalink to &quot;1.2 安装、登录和无限续杯&quot;">​</a></h2><blockquote><p>快速安装 Cursor、登录指南！！！！</p></blockquote><h3 id="_1-2-1-安装" tabindex="-1">1.2.1 安装 <a class="header-anchor" href="#_1-2-1-安装" aria-label="Permalink to &quot;1.2.1 安装&quot;">​</a></h3><ul><li>访问 <a href="https://cursor.com/" target="_blank" rel="noreferrer">cursor.com</a> 并单击 “下载” 按钮（安装包在资料文件夹 版本0.50.7）</li><li>运行安装程序并等待安装完成</li><li>通过桌面快捷方式或从应用菜单启动 Cursor即可</li></ul><h3 id="_1-2-2-登录" tabindex="-1">1.2.2 登录 <a class="header-anchor" href="#_1-2-2-登录" aria-label="Permalink to &quot;1.2.2 登录&quot;">​</a></h3><ul><li><p>点击 <strong>“注册”</strong> 或 <strong>“登录”</strong> 后，系统会提示您设置一个帐户。可以选择使用邮件，或者注册 Google 或 GitHub。</p><blockquote><p>如果第一次使用 Cursor，将获得 14 天的免费试用期 。</p></blockquote></li><li><p>登录后，送回 Cursor，然后就可以<strong>开始编码了！</strong></p></li></ul><h3 id="_1-2-3-无限续杯" tabindex="-1">1.2.3 无限续杯 <a class="header-anchor" href="#_1-2-3-无限续杯" aria-label="Permalink to &quot;1.2.3 无限续杯&quot;">​</a></h3><p>​ Cursor新注册后有着14天免费，50次免费高级提问的额度，但是也很轻易就会到上限的。其通过检测用户的邮箱账号以及电脑的机器码进行识别。我们出于学习的意图，可以尝试在达到上限后绕过这些限制继续学习，更推荐进行付费使用，功能也会更强大！</p><ol><li>准备新邮箱</li></ol><p>​ 可以去2925无限邮注册一个账号，这个邮箱平台的一个优势是用户申请的邮箱之后，可以自行创建子邮箱。比方说，我创建了atguigu@2925.com这个邮箱，那么我们在申请账号的时候，可以使用atguigu123@2925.com、atguiguabc@2925.com、atguigu666@2925.COM等邮箱进行注册（也就是atguigu数字随意添加@2925.com），邮箱问题得以解决！注册地址： <code>https://www.2925.com/</code></p><blockquote><p>注意：2925邮箱地址已被cursor禁用，使用其他注册邮箱就可以</p></blockquote><ol start="2"><li>机器码识别破解</li></ol><p>​ 其次是机器码识别方面。Cursor的团队意识到了人们会通过换邮箱的方式投机取巧，于是加入了校验本机机器码的环节。即使用户注册了一个新的邮箱，但是机器码所属的额度用完之后，也是不能继续免费了。于是此开源项目便诞生了【yeongpin/cursor-free-vip】，可以帮我们进行重置机器码，并且快速注册新的账号等功能！</p><ul><li><p><code>https://github.com/yeongpin/cursor-free-vip/releases</code>下载cusor-free-vip软件！（资料含下载完的软件）</p></li><li><p>右键管理员身份运行</p></li><li><p>重置机器ID （选择1）</p><p><img src="'+e+'" alt="" data-fancybox="gallery"></p></li><li><p>重新注册和登录即可（选择2，会跳出注册流程）</p><p><img src="'+n+'" alt="" data-fancybox="gallery"></p></li></ul><h2 id="_1-3-cursor配置说明以及汉化" tabindex="-1">1.3 Cursor配置说明以及汉化 <a class="header-anchor" href="#_1-3-cursor配置说明以及汉化" aria-label="Permalink to &quot;1.3 Cursor配置说明以及汉化&quot;">​</a></h2><p>在 Cursor 中，<strong>Cursor Settings</strong> 和 <strong>Editor Settings</strong> 是两个不同的配置入口，分别用于管理 <strong>AI 功能</strong> 和 <strong>编辑器基础设置</strong>。</p><table tabindex="0"><thead><tr><th><strong>对比项</strong></th><th><strong>Cursor Settings</strong></th><th><strong>Editor Settings</strong></th></tr></thead><tbody><tr><td><strong>功能定位</strong></td><td>管理 AI 相关功能和 Cursor 特有设置</td><td>调整编辑器基础行为和外观</td></tr><tr><td><strong>继承性</strong></td><td>与 VS Code 差异较大（Cursor 独有功能）</td><td>大部分继承自 VS Code（如主题设置）</td></tr><tr><td><strong>影响范围</strong></td><td>影响 AI 代码生成、分析、对话的效果</td><td>影响代码编辑体验（如排版、颜色）</td></tr><tr><td><strong>典型配置示例</strong></td><td>调整 AI 模型参数、代码库索引路径</td><td>修改字体、启用自动保存、更改主题</td></tr></tbody></table><h3 id="_1-3-1-cursor-ai相关设置" tabindex="-1">1.3.1 Cursor AI相关设置 <a class="header-anchor" href="#_1-3-1-cursor-ai相关设置" aria-label="Permalink to &quot;1.3.1 Cursor AI相关设置&quot;">​</a></h3><p><code>通过齿轮图标、Cmd/Ctrl + Shift + J</code> 开启`光标设置，即可进行AI编程相关的定制配置：</p><p><strong>以下是对 Cursor Settings 中各项配置的作用解释：</strong></p><ul><li><strong>General（常规）</strong>：包含账户相关设置，可进行登录、注册操作，实现配置在不同设备间的同步 ；能进行 VS Code 配置导入，快速迁移主题、快捷键等设置；还隐私配置管理。</li><li><strong>Features（功能）</strong>：可开关 AI 代码补全、对话模式（Ask、Edit、Agent ）等核心功能；还能对这些功能的相关参数进行微调，比如调整代码补全的触发灵敏度、对话模式的快捷操作设置等 。</li><li><strong>Models（模型）</strong>：允许用户选择不同的 AI 模型（有多个可用选项 ）；添加模型和配置模型访问API Key等。</li><li><strong>Rules（规则）</strong>：例如可以制定代码检查规则，像对代码格式、语法规范等进行约束；也能设置特定代码操作的规则，比如当进行代码重构、修改时遵循的逻辑和标准等 。</li><li><strong>MCP</strong>: 配置多MCP操作的相关行为，比如选择代码时的联动规则、批量编辑代码的方式等，帮助开发者更高效地对多处代码进行统一操作 。</li><li><strong>Indexing（索引）</strong>: 定义需要被索引的代码库路径，让 Cursor 的 AI 能理解代码上下文；设置排除规则，排除不需要索引的文件或文件夹（如第三方库、缓存文件 ），提高索引效率和 AI 分析的准确性。</li><li><strong>Beta（测试版）</strong>: 可启用或禁用测试功能，提供反馈等。用户能通过这里尝试 Cursor 的新功能，并帮助开发团队测试和改进这些尚未正式发布的特性 。</li></ul><h3 id="_1-3-2-cursor-编辑器设置" tabindex="-1">1.3.2 Cursor 编辑器设置 <a class="header-anchor" href="#_1-3-2-cursor-编辑器设置" aria-label="Permalink to &quot;1.3.2 Cursor 编辑器设置&quot;">​</a></h3><p>通过命令面板访问 （<code>Cmd/Ctrl + Shift + P</code>） &gt; <code>&quot;Preferences: Open Settings (UI)&quot;</code></p><p>调整编辑器行为和外观，此处和VS Code一致：</p><p><img src="'+l+'" alt="" data-fancybox="gallery"></p><p><strong>在 Cursor 编辑器设置中，“User” 和 “Workspace” 存在以下差异：</strong></p><p>User（用户）</p><ul><li>作用范围：User 设置是全局性的，应用于当前登录用户在所有工作空间中的操作。无论打开哪个项目或工作空间，这些设置都始终生效。</li><li>数据存储：User 设置存储在用户的配置文件中，与特定项目无关。当在不同设备上登录同一账号时，User 设置会同步，保证一致的使用体验。</li></ul><p>Workspace（工作空间）</p><ul><li>作用范围：Workspace 设置仅在特定的工作空间（一般对应一个项目文件夹 ）内有效。不同的工作空间可以有各自独立的设置，互不影响。</li><li>数据存储：Workspace 设置存储在工作空间根目录下的 <code>.vscode</code> 文件夹（Cursor 基于 VS Code，沿用类似结构 ）中，仅在该工作空间打开时生效。</li></ul><h3 id="_1-3-3-cursor-汉化配置" tabindex="-1">1.3.3 Cursor 汉化配置 <a class="header-anchor" href="#_1-3-3-cursor-汉化配置" aria-label="Permalink to &quot;1.3.3 Cursor 汉化配置&quot;">​</a></h3><p>Cursor工具汉化配置步骤：</p><ol><li><strong>打开扩展</strong>：启动 Cursor 后，按下<code>Ctrl + Shift + X</code>（Windows/Linux）或<code>Cmd + Shift + X</code>（Mac） ，左侧边栏会出现扩展商店界面。</li><li><strong>搜索并安装插件</strong>：在搜索框输入 &quot;Chinese&quot; 或 &quot;中文&quot; ，一般选择下载量最高的 &quot;Chinese (Simplified) Language Pack for Visual Studio Code&quot;，点击安装按钮进行安装。</li><li><strong>打开命令面板</strong>：按下<code>Ctrl + Shift + P</code>（Windows/Linux）或<code>Cmd + Shift + P</code>（Mac） ，输入 &quot;Configure Display Language&quot; 并回车，进入语言配置界面。</li><li><strong>选择中文并重启</strong>：在弹出的语言列表中选择 &quot;中文（简体）&quot; 或 &quot;zh-cn&quot; ，保存设置后重启 Cursor。此时界面将完全切换为中文，包括菜单、提示信息和设置选项 。</li></ol><h2 id="_1-4-从vs-code配置迁移" tabindex="-1">1.4 从VS Code配置迁移 <a class="header-anchor" href="#_1-4-从vs-code配置迁移" aria-label="Permalink to &quot;1.4 从VS Code配置迁移&quot;">​</a></h2><h3 id="_1-4-1-一键导入配置" tabindex="-1">1.4.1 一键导入配置 <a class="header-anchor" href="#_1-4-1-一键导入配置" aria-label="Permalink to &quot;1.4.1 一键导入配置&quot;">​</a></h3><p>一键导入功能，导入的是当前电脑中默认位置存储的vs code的配置文件！这将转移vs code的：Extensions 扩展、Themes 主题、Settings 设置、Keybindings 键绑定等！</p><blockquote><p><strong>VS Code 的配置文件默认位置为：</strong></p><ul><li><p><strong>window系统</strong>: 导入的是 “%appdata%\\code\\user\\” 路径下的配置文件。该路径下的 “settings.json” 文件</p></li><li><p><strong>macOS系统</strong>: 导入的是 “~/Library/Application Support/Code/User/” 路径下的配置内容。</p></li><li><p><strong>Linux系统</strong>: 导入的是 “~/.config/code/user/” 路径下的配置文件，涵盖了个性化设置、快捷键设置等。</p></li></ul><p>**注意：**并非所有 VS Code 扩展都与 Cursor 兼容。一些依赖 VS Code 特定 API 的插件，在导入时可能导致整个导入过程失败或部分功能（如主题显示）异常。</p></blockquote><ol><li><p>打开Cursor设置 （ ⌘ / Ctrl + Shift + J ）</p></li><li><p>导航到 常规 &gt; 帐户</p></li><li><p>在“VS Code Import（VS Code 导入）”下，单击“导入”按钮</p><p><img src="'+d+`" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_1-4-2-手动配置文件迁移" tabindex="-1">1.4.2 手动配置文件迁移 <a class="header-anchor" href="#_1-4-2-手动配置文件迁移" aria-label="Permalink to &quot;1.4.2 手动配置文件迁移&quot;">​</a></h3><p>如果要在计算机之间移动，或者希望对设置进行更多控制，则可以手动迁移配置文件。</p><p><strong>导出配置文件</strong></p><ol><li>在 VS Code 实例上，打开命令面板 （ ⌘ / Ctrl + Shift + P ）</li><li>搜索 “Preferences： Open Profiles （UI）”</li><li>在左侧边栏上找到要导出的个人资料</li><li>单击 3 个点菜单并选择 “Export Profile”</li><li>选择将其导出到本地计算机或 GitHub Gist</li></ol><p><strong>导入配置文件</strong></p><ol><li>在 Cursor 实例上，打开 Command Palette （ ⌘ / Ctrl + Shift + P ）</li><li>搜索 “Preferences： Open Profiles （UI）”</li><li>单击“New Profile”旁边的下拉菜单，然后单击“Import Profile”</li><li>粘贴 GitHub Gist 的 URL 或选择“选择文件”以上传本地文件</li><li>单击对话框底部的 &#39;Import&#39; 以保存配置文件</li><li>最后，在侧边栏中，选择新的配置文件，然后单击勾号图标将其激活</li></ol><h2 id="_1-5-java语言环境" tabindex="-1">1.5 Java语言环境 <a class="header-anchor" href="#_1-5-java语言环境" aria-label="Permalink to &quot;1.5 Java语言环境&quot;">​</a></h2><p>接下来，我们在Cursor中进行 Java 开发配置，包括设置 JDK、安装必要的扩展、调试、运行 Java 应用程序以及集成 Maven等构建工具。</p><h3 id="_1-5-1-配置本地jdk和maven配置" tabindex="-1">1.5.1 配置本地jdk和maven配置 <a class="header-anchor" href="#_1-5-1-配置本地jdk和maven配置" aria-label="Permalink to &quot;1.5.1 配置本地jdk和maven配置&quot;">​</a></h3><p><strong>自动读取情况</strong></p><p>如果 Cursor 基于类似 VS Code 的机制运行（Cursor 与 VS Code 有诸多关联），在系统环境变量中正确配置了 <code>JAVA_HOME</code> 和 <code>MAVEN_HOME</code> ，且环境变量配置无误（变量值准确指向 JDK 和 Maven 的安装目录 ），部分情况下 Cursor 能自动识别并应用这些配置。比如，当你在 Cursor 中创建、运行或调试 Java 项目时，它可能会利用自动读取到的环境变量来找到对应的 JDK 和 Maven 位置，完成代码编译、项目构建等操作。</p><p><strong>手动配置情况</strong></p><p>若 Cursor 没有自动读取到 JDK 和 Maven 配置，就需要手动配置。可在 <code>settings.json</code> 文件中进行操作。按 <code>Ctrl + Shift + P</code> （Windows/Linux）或 <code>Cmd + Shift + P</code>（Mac）打开命令面板，输入 “Preferences: Open User Settings (JSON)” 并回车，打开 <code>settings.json</code> 文件 。然后添加或修改以下内容：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;java.home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你的 JDK 安装路径（对应 JAVA_HOME 变量值）&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;java.configuration.maven.userSettings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你的 Maven 配置文件 settings.xml 所在路径&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;java.home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:/tool/jdk-21.0.8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;java.configuration.maven.userSettings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:/tool/apache-maven-3.9.6/conf/settings.xml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>保存文件后，重启 Cursor 使配置生效。</p><h3 id="_1-5-2-java环境扩展插件安装和使用" tabindex="-1">1.5.2 Java环境扩展插件安装和使用 <a class="header-anchor" href="#_1-5-2-java环境扩展插件安装和使用" aria-label="Permalink to &quot;1.5.2 Java环境扩展插件安装和使用&quot;">​</a></h3><p>Java 开发环境中，<strong>即使已安装 JDK 和 Maven 并配置好环境变量，仍需安装 Java 扩展插件</strong>以获得完整的开发体验。这些插件能将编辑器（如 Cursor/VS Code）从 “普通文本编辑器” 转变为 “智能 IDE”，提供语法高亮、代码补全、错误提示、调试支持、Maven 项目管理等核心功能。</p><p><img src="`+p+'" alt="" data-fancybox="gallery"></p><p>安装插件过程：</p><ul><li><strong>Cursor</strong>：按 <code>Ctrl + Shift + X</code>（Windows/Linux）或 <code>Cmd + Shift + X</code>（Mac），或点击左侧活动栏的方块图标。</li><li><strong>Extension Pack for Java</strong>，选择由 <strong>Microsoft</strong> 发布的扩展包，并安装。</li></ul><p>“<strong>Extension Pack for Java</strong>” 是一个插件集合，而非具体单个插件。它集成了多个与 Java 开发相关的插件，安装后能为开发者在 Visual Studio Code 或 Cursor 等编辑器中提供完整的 Java 开发环境，涵盖从代码编写、调试、测试到项目管理等多方面功能 。其包含的主要插件及作用如下：</p><ul><li><p><strong>Language Support for Java(TM) by Red Hat</strong>：提供语法高亮、智能代码补全、代码检查、代码格式化（<code>Shift + Alt + F</code>（Windows/Linux）或 <code>Shift + Option + F</code>（Mac））、代码导航以及重构支持等功能，辅助高效编写和优化 Java 代码。</p></li><li><p><strong>Debugger for Java</strong>：实现轻量级 Java 程序调试，可设置断点，调试时查看变量值、对象属性和调用栈，追踪程序执行流程以排查问题。</p></li><li><p><strong>Maven for Java</strong>：用于管理 Maven 项目，能创建新项目，管理项目依赖，执行 Maven 构建任务，如清理、编译、打包项目等。</p></li><li><p><strong>Test Runner for Java</strong>：支持 JUnit 和 TestNG 等测试框架，方便运行和调试 Java 测试用例，展示测试结果及详细日志，助力开发者定位问题。</p></li><li><p><strong>Project Manager for Java</strong>：可在编辑器中管理多个 Java 项目，实现快速切换，导入本地 Java 项目，可视化展示项目模块、包和文件结构。</p></li><li><p><strong>Gradle for Java</strong>：针对 Gradle 构建工具，能创建 Gradle 项目，运行 Gradle 任务，管理项目构建、测试流程，查看 Gradle 任务和工程依赖 。</p></li></ul>',69)]))}const q=t(u,[["render",c]]);export{b as __pageData,q as default};
