import{_ as i,c as a,o as n,a0 as l}from"./chunks/framework.DqNHTjo5.js";const p="/note-ai/code/tool/cursor/007.png",t="/note-ai/code/tool/cursor/overview.mp4",h="/note-ai/code/tool/cursor/008.png",e="/note-ai/code/tool/cursor/009.png",k="/note-ai/code/tool/cursor/010.png",r="/note-ai/code/tool/cursor/011.png",o="/note-ai/code/tool/cursor/012.png",d="/note-ai/code/tool/cursor/013.png",g="/note-ai/code/tool/cursor/014.png",c="/note-ai/code/tool/cursor/015.png",E="/note-ai/code/tool/cursor/016.png",y="/note-ai/code/tool/cursor/017.png",u="/note-ai/code/tool/cursor/018.png",F="/note-ai/code/tool/cursor/019.png",b="/note-ai/code/tool/cursor/020.png",A="/note-ai/code/tool/cursor/021.png",C="/note-ai/code/tool/cursor/022.png",m="/note-ai/code/tool/cursor/023.png",D="/note-ai/code/tool/cursor/024.png",v="/note-ai/code/tool/cursor/025.png",_="/note-ai/code/tool/cursor/026.png",B="/note-ai/code/tool/cursor/027.png",x="/note-ai/code/tool/cursor/028.png",L=JSON.parse('{"title":"二、Cursor三大核心AI功能","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/code/tool/cursor/02.md","filePath":"markdown/code/tool/cursor/02.md"}'),f={name:"markdown/code/tool/cursor/02.md"};function q(T,s,P,S,I,j){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="二、cursor三大核心ai功能" tabindex="-1">二、Cursor三大核心AI功能 <a class="header-anchor" href="#二、cursor三大核心ai功能" aria-label="Permalink to &quot;二、Cursor三大核心AI功能&quot;">​</a></h1><h2 id="_2-1-tab键-智能小助手" tabindex="-1">2.1 Tab键：智能小助手 <a class="header-anchor" href="#_2-1-tab键-智能小助手" aria-label="Permalink to &quot;2.1 Tab键：智能小助手&quot;">​</a></h2><p>Cursor 的 Tab 键具有强大的代码自动补全功能，基于 AI 模型，能根据代码上下文自动预测并生成代码补全建议和代码修复重构，还可用于导航代码等！</p><blockquote><p><code>Tab</code> 键接受建议，也可以通过按 <code>Esc</code> 键拒绝建议。要逐字部分接受建议，请按 <code>Ctrl/⌘ + →</code>。</p></blockquote><h3 id="_2-1-1-单行-多行代码补全" tabindex="-1">2.1.1 单行/多行代码补全 <a class="header-anchor" href="#_2-1-1-单行-多行代码补全" aria-label="Permalink to &quot;2.1.1 单行/多行代码补全&quot;">​</a></h3><ul><li><p>已有代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//需求：写一个工具类计算数组平均值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 按tab会完成补全</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>按tab键 → Cursor 自动生成代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//需求：写一个工具类计算数组平均值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.length;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="_2-1-2-智能代码重写" tabindex="-1">2.1.2 智能代码重写 <a class="header-anchor" href="#_2-1-2-智能代码重写" aria-label="Permalink to &quot;2.1.2  智能代码重写&quot;">​</a></h3><ul><li><p>已有代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Arrays;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; evenNumbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                evenNumbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>按Tab键 → 自动补全：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在循环上方添加注释：// 使用 Stream 重构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//光标放在循环代码块的任意位置，按 Tab 键</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; evenNumbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="_2-1-3-多行协同优化" tabindex="-1">2.1.3 多行协同优化 <a class="header-anchor" href="#_2-1-3-多行协同优化" aria-label="Permalink to &quot;2.1.3  多行协同优化&quot;">​</a></h3><p>Cursor 的 <strong>多行协同优化</strong> 核心能力：多行代码，一次性完成 <strong>语法升级、结构重组、安全修复</strong>。</p><ul><li><p>多行数据联想</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 姓名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isValid; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 价格</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//tab 会继续联想变量类型</span></span></code></pre></div></li><li><p>多行批量修改</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //代码添加注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第一次输出&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第二次输出&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第三次输出&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第四次输出&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="_2-1-4-光标位置预测" tabindex="-1">2.1.4 光标位置预测 <a class="header-anchor" href="#_2-1-4-光标位置预测" aria-label="Permalink to &quot;2.1.4 光标位置预测&quot;">​</a></h3><ul><li><p>准备测试代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //给下面方法添加注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>测试案例说明</p><p><img src="`+p+`" alt="" data-fancybox="gallery"></p></li></ul><h3 id="_2-1-5-接受-接受部分和拒绝" tabindex="-1">2.1.5 接受，接受部分和拒绝 <a class="header-anchor" href="#_2-1-5-接受-接受部分和拒绝" aria-label="Permalink to &quot;2.1.5 接受，接受部分和拒绝&quot;">​</a></h3><ul><li><p>准备测试类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //tab </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //tab 接收完整补全</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //ctrl + -&gt; 部分和逐步接收补全 [需要开启部分补全配置]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //esc 或者 继续输入 拒绝补全</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>测试和演示效果</p></li></ul><h3 id="_2-1-6-tab相关配置说明" tabindex="-1">2.1.6 Tab相关配置说明 <a class="header-anchor" href="#_2-1-6-tab相关配置说明" aria-label="Permalink to &quot;2.1.6  Tab相关配置说明&quot;">​</a></h3><p>配置修改位置： <code>cursor settings &gt; features &gt; tab </code></p><ul><li><p><strong>A powerful Copilot replacement that can suggest changes across multiple lines...</strong></p><ul><li>作用：启用 / 禁用 Cursor Tab 功能。</li><li>通俗理解：相当于 “总开关”，勾选后才能用 Tab 键触发 AI 代码建议（如多行补全、智能续写）；取消勾选则 Tab 仅作普通缩进。</li></ul></li><li><p><strong>Accept the next word of a suggestion via Ctrl+RightArrow</strong></p><ul><li><strong>作用</strong>：开启后，可用 <code>Ctrl+→</code>（Windows/Linux）或 <code>⌘+→</code>（Mac）<strong>逐个单词接受 AI 建议</strong>。</li><li><strong>通俗理解</strong>：AI 给的建议很长时，不想全要？开这个功能，按快捷键 “挑着用”。</li></ul></li><li><p><strong>场景</strong>：比如 AI 建议 <code>const fullName = firstName + &quot; &quot; + lastName;</code>，但你只想用 <code>firstName + &quot; &quot; + lastName</code> 部分，就可通过该快捷键拆分接受。</p></li><li><p><strong>Enable Cursor Tab suggestions in comments</strong></p><ul><li><strong>作用</strong>：让 AI 在<strong>注释内容里也提供 Tab 建议</strong>。</li><li><strong>通俗理解</strong>：写注释时，AI 帮你补全思路！比如输入 <code>// 实现冒泡排序的步骤：</code>，按 Tab 自动续写步骤说明。</li></ul></li><li><p><strong>Show whitespace only Cursor Tab suggestions</strong></p><ul><li><p><strong>作用</strong>：控制是否显示<strong>仅包含空白（空格、换行）的 AI 建议</strong>。</p></li><li><p><strong>通俗理解</strong>：这个配置项决定了 <strong>当按 Tab 时，是否让那些 “只调整空格、换行、缩进（没有实际代码逻辑变化）” 的建议显示出来</strong>。。</p></li><li><p><strong>案例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Demo {</span></span>
<span class="line"><span>public void test() {</span></span>
<span class="line"><span>System.out.println(&quot;Hello&quot;);</span></span>
<span class="line"><span>  if (true) {</span></span>
<span class="line"><span>System.out.println(&quot;World&quot;);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>勾选：把光标放在混乱的代码里（比如 <code>public void test() {</code> 这行后面） tab 会有修改建议</li><li>不勾选：把光标放在混乱的代码里（比如 <code>public void test() {</code> 这行后面） tab不会有修改建议</li></ul></li></ul></li><li><p><strong>Tab to import necessary modules with Cursor Tab. Only supports TypeScript</strong></p><ul><li><strong>作用</strong>：在 TypeScript 中，写代码时缺模块，按 Tab 自动帮你<strong>导入依赖</strong>。</li></ul></li><li><p><strong>Enable auto import for Python. This is a beta feature.</strong></p><ul><li><strong>作用</strong>：（测试版）为 Python 开启类似功能，按 Tab 自动导入缺失模块。</li></ul></li></ul><h2 id="_2-2-chat-对话模式" tabindex="-1">2.2 Chat: 对话模式 <a class="header-anchor" href="#_2-2-chat-对话模式" aria-label="Permalink to &quot;2.2 Chat: 对话模式&quot;">​</a></h2><p>Chat（以前称为“Composer”）是 Cursor 的 AI 助手，位于的侧边栏中，可让您通过自然语言与代码库进行交互。您可以提出问题、请求代码编辑、获取终端命令建议等 - 所有这些都无需切换上下文。</p><p><video src="`+t+`"></video></p><p><strong>Cursor chat 主要功能点：</strong></p><ul><li>Chat 能够了解代码库并代表我们对其进行更改。这是实现新功能的强大方法，也是功能请求的完美工具。</li><li>Chat通过深入了解我们的代码库以及每个组件如何组合在一起，Chat 可以帮助您重构代码库。</li><li>Chat可以根据我们的需求，从零开始进行项目搭建，包括创建项目结构，安装依赖项，甚至编写初始代码，让我们尽快开始业务编码。</li><li>Chat也可以根据我项目的错误信息，进行错误定位和错误代码直接调整解决。</li></ul><h3 id="_2-2-1-快速开始" tabindex="-1">2.2.1 快速开始 <a class="header-anchor" href="#_2-2-1-快速开始" aria-label="Permalink to &quot;2.2.1 快速开始&quot;">​</a></h3><p>使用 <code>⌘+L</code> （Mac） 或 <code>Ctrl+L</code> （Windows/Linux） 访问侧边栏中的聊天。用自然语言输入我们的请求，AI 将做出相应的响应。</p><blockquote><p>注意： 与Chat 对话时，建议采用清晰、具体的语言格式，最好包含任务类型、上下文描述和具体要求。</p></blockquote><p>以下是几个参考模板：</p><ul><li><p><strong>代码生成类</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[任务类型]：请生成一个 {功能描述} 的 {编程语言/框架} 实现</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体要求]：</span></span>
<span class="line"><span>1. 使用 {特定技术/库}</span></span>
<span class="line"><span>2. 包含 {特定功能点}</span></span>
<span class="line"><span>2. 符合 {编码规范/设计模式}</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请生成一个学习计划页面的HTML+CSS+JavaScript实现</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体要求]：</span></span>
<span class="line"><span>1. 使用Tailwind CSS v3和Font Awesome</span></span>
<span class="line"><span>2. 包含任务添加、编辑、删除功能</span></span>
<span class="line"><span>2. 包含日历视图展示学习计划</span></span>
<span class="line"><span>4. 包含学习进度可视化图表</span></span>
<span class="line"><span>5. 符合现代UI设计原则和响应式设计</span></span>
<span class="line"><span>6. 具有平滑的动画和交互效果</span></span></code></pre></div></li><li><p><strong>代码修改类</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[任务类型]：请帮我修改 {上下文：具体文件/代码片段}，实现 {预期功能}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[当前问题]：{现有的错误/不足描述}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体要求]：</span></span>
<span class="line"><span>1. 保持 {现有功能/结构} 不变</span></span>
<span class="line"><span>2. 使用 {特定方法/技术} 改进</span></span>
<span class="line"><span>2. 修复 {具体错误/警告}</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请帮我修改当前的 React 组件，优化列表渲染性能。</span></span>
<span class="line"><span>当前问题：滚动时列表卡顿，存在明显性能问题。</span></span>
<span class="line"><span>要求：</span></span>
<span class="line"><span>1. 保持现有 UI 不变</span></span>
<span class="line"><span>2. 使用 React.memo 和虚拟列表技术优化</span></span>
<span class="line"><span>2. 添加性能监控日志</span></span></code></pre></div></li><li><p><strong>代码解释类</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[任务类型]：请解释 {代码片段/功能模块} 的 {具体方面}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[上下文信息]：{相关业务背景/技术栈}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体问题]：</span></span>
<span class="line"><span>1. {不理解的语法/逻辑}</span></span>
<span class="line"><span>2. {特定设计选择的原因}</span></span>
<span class="line"><span>2. {潜在的问题/优化点}</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请解释这段 TypeScript 代码的泛型约束和类型推导逻辑。</span></span>
<span class="line"><span>上下文：这是一个用于数据验证的工具函数。</span></span>
<span class="line"><span>具体问题：</span></span>
<span class="line"><span>1. &lt;T extends object&gt; 这里为什么要加 extends object？</span></span>
<span class="line"><span>2. 类型推导是如何工作的？</span></span>
<span class="line"><span>2. 是否存在类型安全隐患？</span></span></code></pre></div></li><li><p><strong>流程自动化类</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[任务类型]：请创建一个自动化流程，实现 {目标描述}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[操作步骤]：</span></span>
<span class="line"><span>1. 从 {数据源} 获取 {数据类型}</span></span>
<span class="line"><span>2. 执行 {数据处理/转换操作}</span></span>
<span class="line"><span>2. 将结果保存到 {目标位置}</span></span>
<span class="line"><span>4. 触发 {后续操作/通知}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体要求]：</span></span>
<span class="line"><span>1. 使用 {特定工具/API}</span></span>
<span class="line"><span>2. 添加 {错误处理/重试机制}</span></span>
<span class="line"><span>2. 生成 {日志/报告}</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请创建一个自动化流程，每天凌晨从 GitHub API 获取仓库星标数，保存到 Google Sheets 并生成趋势图。</span></span>
<span class="line"><span>要求：</span></span>
<span class="line"><span>1. 使用 GitHub REST API v3</span></span>
<span class="line"><span>2. 添加异常处理和邮件通知</span></span>
<span class="line"><span>2. 生成周/月增长趋势图表</span></span></code></pre></div></li><li><p><strong>命令行辅助类</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[任务类型]：请提供 {操作场景} 的 {操作系统} 命令</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[具体需求]：</span></span>
<span class="line"><span>1. {执行的具体操作}</span></span>
<span class="line"><span>2. 包含 {特定参数/选项}</span></span>
<span class="line"><span>2. 处理 {特殊情况/错误}</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请提供在 macOS 上批量压缩图片的命令行方案。</span></span>
<span class="line"><span>需求：</span></span>
<span class="line"><span>1. 将当前目录下所有 PNG/JPG 图片压缩 50%</span></span>
<span class="line"><span>2. 保留原始文件并添加 &quot;-compressed&quot; 后缀</span></span>
<span class="line"><span>2. 显示每个文件的压缩前后大小对比</span></span></code></pre></div></li></ul><p><strong>提示词技巧总结：</strong></p><ol><li><strong>提供上下文</strong>：提及项目语言、框架、业务背景等信息</li><li><strong>分点描述</strong>：将复杂需求拆解为具体步骤或要求</li><li><strong>使用技术术语</strong>：准确的术语能帮助 AI 更精准理解需求</li><li><strong>明确边界</strong>：说明必须保留的现有功能或禁止的实现方式</li><li><strong>示例引导</strong>：附上期望输出示例或参考代码风格</li></ol><h3 id="_2-2-2-chat三种模式" tabindex="-1">2.2.2 Chat三种模式 <a class="header-anchor" href="#_2-2-2-chat三种模式" aria-label="Permalink to &quot;2.2.2 Chat三种模式&quot;">​</a></h3><p>Chat 提供针对特定任务优化的不同模式：</p><ol><li>Agent代理模式（默认）: 允许Cursor学习和理解我们的项目代码，并且代表们可以直接进行项目代码更改！[识别项目结构]</li><li>Ask对话模式：获取项目代码相关的解释和答案，但是不会直接修改项目代码！[识别项目结构]</li><li>Manual手动模式：需要我们执行项目上下文（修改范围，后续会详细讲解）重点编辑！[不识别项目结构]</li></ol><h4 id="_2-2-2-1-agent模式体验" tabindex="-1">2.2.2.1 Agent模式体验 <a class="header-anchor" href="#_2-2-2-1-agent模式体验" aria-label="Permalink to &quot;2.2.2.1 Agent模式体验&quot;">​</a></h4><p>Agent 是 Cursor 中的默认且最自主的模式，旨在以最少的指导处理复杂的编码任务。它启用了所有[工具 ]，可以自主探索您的代码库、阅读文档、浏览 Web、编辑文件和运行终端命令以高效完成任务。</p><p><img src="`+h+`" alt="" data-fancybox="gallery"></p><p>Agent的能力总结：</p><ul><li>独立探索您的代码库，识别相关文件，并进行必要的更改</li><li>使用所有可用工具搜索、编辑、创建文件和运行终端命令</li><li>全面了解项目结构和依赖关系</li><li>将复杂任务分解为可管理的步骤并按顺序执行</li></ul><p>生成和修改示例：</p><ol><li><p>新打开一个文件夹</p></li><li><p>ctrl + L 进行对话模式（默认 agent）</p></li><li><p>用例对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>使用html,css,javascript来实现一个贪吃蛇页面！</span></span>
<span class="line"><span>要求：</span></span>
<span class="line"><span>  1. 要求有积分统计</span></span>
<span class="line"><span>  2. 页面要有多种背景可以切换</span></span>
<span class="line"><span>  2. 代码添加中文注释</span></span>
<span class="line"><span>  4. 不能使用var 只能使用let和const声明变量</span></span></code></pre></div></li><li><p>生成代码</p></li><li><p>运行代码对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>把index.html页面在浏览器打开</span></span></code></pre></div></li><li><p>后续调整代码对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在页面中添加倒计时功能，每次60秒！</span></span></code></pre></div></li></ol><p>Agent的配置选项：</p><p><img src="`+e+'" alt="" data-fancybox="gallery"></p><p><img src="'+k+`" alt="" data-fancybox="gallery"></p><ul><li>Model（选择模型 ）：为代理模式预先选择大模型</li><li>Edit Keybindings（编辑快捷键）： 为agent模式设置快速开启快捷键（默认 ctrl + i）</li><li>Auto-run ( 自动运行 ) ：当你让 Agent 修改代码后，自动执行相关命令（如编译、测试、运行），验证修改的正确性。</li><li>Auto-fix errors ( 自动修复 ) ：当自动运行过程中出现错误（如编译失败、测试报错），Agent 会尝试分析错误信息并自动修复。</li></ul><p>错误调试和修改示例：</p><ol><li><p>准备错误信息类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个整数数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用for循环输出数组内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;数组内容如下：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //此处 i + 2就会出现下角标越界错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 个元素是: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用增强型for循环输出数组内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">使用增强型for循环输出：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>运行报错</p><p><img src="`+r+'" alt="" data-fancybox="gallery"></p></li><li><p>对话解决错误信息</p><p><img src="'+o+'" alt="" data-fancybox="gallery"></p></li></ol><h4 id="_2-2-2-2-ask模式体验" tabindex="-1">2.2.2.2 Ask模式体验 <a class="header-anchor" href="#_2-2-2-2-ask模式体验" aria-label="Permalink to &quot;2.2.2.2 Ask模式体验&quot;">​</a></h4><p>Ask 是 Chat 的 “只读” 模式，用于提出问题、探索和了解代码库。它是 Cursor 中的一种内置对话模式！</p><blockquote><p>对比：Ask 是其他默认模式（Agent 和 Manual）所独有的，因为它默认不应用任何建议的更改 - 这使它成为一种 “只读” 模式，具有读取文件和其他上下文的完整能力，但不能自行进行任何更改。这对于了解我们可能不想更改的代码库或在实施之前使用 AI 规划解决方案非常有用！</p></blockquote><p>示例用例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>这个贪吃蛇页面如何添加多种模式！</span></span></code></pre></div><p><img src="'+d+'" alt="" data-fancybox="gallery"></p><p>Ask的配置选项：</p><p><img src="'+g+'" alt="" data-fancybox="gallery"></p><ul><li>Model （模型） : 预先选择应作为 Ask （Ask ） 的默认模型</li><li>Keybinding : 设置键绑定以切换到 Ask 模式</li><li>搜索代码库 : 允许 Cursor 搜索它自己的上下文，而不是当你希望 AI 看到文件时，你必须手动 @ 文件作为上下文</li></ul><h4 id="_2-2-2-3-manual模式体验-已弃用" tabindex="-1">2.2.2.3 Manual模式体验（已弃用） <a class="header-anchor" href="#_2-2-2-3-manual模式体验-已弃用" aria-label="Permalink to &quot;2.2.2.3 Manual模式体验（已弃用）&quot;">​</a></h4><p>与 Ask 模式不同，它不探索代码库或运行终端命令;它完全取决于您的具体说明和您提供的上下文（例如，通过 <code>@</code>文件名），AI 生成修改建议后，还要用户<strong>手动点击 “应用”</strong> 才会改动代码，且通常是<strong>单文件 / 局部代码调整</strong>。</p><p><img src="'+c+'" alt="" data-fancybox="gallery"></p><p>示例用例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在 @script.js @index.html 中，给所有代码添加注释和解释！</span></span></code></pre></div><p><img src="'+E+'" alt="" data-fancybox="gallery"></p><p>Manual的配置选项：</p><p><img src="'+y+'" alt="" data-fancybox="gallery"></p><h4 id="_2-2-2-4-background智能后台模式" tabindex="-1">2.2.2.4 Background智能后台模式 <a class="header-anchor" href="#_2-2-2-4-background智能后台模式" aria-label="Permalink to &quot;2.2.2.4 Background智能后台模式&quot;">​</a></h4><p>代码质量监控：当你在编写代码时，Background 模式会在后台自动检查代码质量，例如检查代码风格是否符合规范、是否存在潜在的错误等，并提供优化建议。</p><p>自动优化代码：如果你希望在编写代码的过程中自动优化代码，Background 模式可以在后台运行，自动发现并修复一些常见的问题，例如性能瓶颈、冗余代码等。</p><p>长期项目维护：对于长期维护的项目，Background 模式可以帮助你保持代码的健康状态，自动发现潜在问题并提供修复建议。</p><p>不干扰开发流程：如果你希望在编写代码时不受干扰，但又希望在需要时能够获得优化建议，Background 模式是一个很好的选择。它在后台运行，不会打断你的开发流程。</p><p>适合自身写代码时进行使用</p><h3 id="_2-2-3-chat模式的其他细节" tabindex="-1">2.2.3 Chat模式的其他细节 <a class="header-anchor" href="#_2-2-3-chat模式的其他细节" aria-label="Permalink to &quot;2.2.3 Chat模式的其他细节&quot;">​</a></h3><h4 id="_2-2-3-1-代码编辑选项" tabindex="-1">2.2.3.1 代码编辑选项 <a class="header-anchor" href="#_2-2-3-1-代码编辑选项" aria-label="Permalink to &quot;2.2.3.1 代码编辑选项&quot;">​</a></h4><p>当 Chat 建议更改代码时：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>修改页面背景，可以添加多种颜色可以选！！</span></span></code></pre></div><ol><li><p><strong>Review</strong>：在差异视图中查看建议的更改</p><p><img src="'+u+'" alt="" data-fancybox="gallery"></p></li><li><p><strong>Apply</strong>: 在“ask / Manual ”模式下，使用“应用”按钮显式应用更改</p><p><img src="'+F+'" alt="" data-fancybox="gallery"></p></li><li><p><strong>Accept/Reject(接受/拒绝)</strong> ：进行更改后，决定是保留还是放弃更改(agent模式下)</p><p><img src="'+b+'" alt="" data-fancybox="gallery"></p></li></ol><h4 id="_2-2-3-2-checkpoints-数据还原" tabindex="-1">2.2.3.2 Checkpoints 数据还原 <a class="header-anchor" href="#_2-2-3-2-checkpoints-数据还原" aria-label="Permalink to &quot;2.2.3.2 Checkpoints 数据还原&quot;">​</a></h4><p>有时，可能希望恢复到代码库的<strong>先前状态</strong>。Cursor 通过在发出的每个请求以及每次 AI 更改的代码库时自动创建代码库的检查点（Checkpoints）来帮助您解决这个问题。</p><p>要恢复到以前的状态，您可以：单击上一个请求的输入框中显示的 <code>Restore Checkpoint</code> 按钮，如下所示</p><p><img src="'+A+'" alt="" data-fancybox="gallery"></p><p>注意：是回复到本次对话之前的状态！！不是本次对话产生的状态！！</p><h4 id="_2-2-3-3-历史和新建会话" tabindex="-1">2.2.3.3 历史和新建会话 <a class="header-anchor" href="#_2-2-3-3-历史和新建会话" aria-label="Permalink to &quot;2.2.3.3 历史和新建会话&quot;">​</a></h4><p>聊天历史记录已移至命令面板。可以通过 Chat 中的 “Show history” 按钮以及运行命令面板中的 “Show Chat History” 命令来访问它。</p><p><img src="'+C+'" alt="" data-fancybox="gallery"></p><p>开启新任务、避免对话混乱、保留特定记录或解决误操作时，需在 Cursor 的 Chat 新建聊天框。</p><p><img src="'+m+'" alt="" data-fancybox="gallery"></p><h3 id="_2-2-4-chat相关的配置说明" tabindex="-1">2.2.4 Chat相关的配置说明 <a class="header-anchor" href="#_2-2-4-chat相关的配置说明" aria-label="Permalink to &quot;2.2.4 Chat相关的配置说明&quot;">​</a></h3><ul><li><strong>Default new chat mode</strong>：设置新聊天默认模式，选 “Agent” 则新聊天默认用智能代理交互 ，决定初始聊天交互载体。</li><li><strong>Chat text size</strong>：调整 AI 聊天消息文字大小，“Default” 是默认尺寸，可按需改显示效果，让阅读更舒适。</li><li><strong>Auto - refresh chats</strong>：勾选后，聊天面板闲置再打开时自动新建聊天，保持交互新鲜度，避免旧聊天堆积干扰。</li><li><strong>Auto - scroll to bottom</strong>：新消息生成时自动滚动到聊天面板底部，不用手动翻，方便实时看最新内容。</li><li><strong>Auto - apply to files outside context in Manual mode</strong>：手动模式下，允许聊天对当前上下文外文件自动应用更改，拓展操作范围，处理跨文件任务更便捷。</li><li><strong>Include project structure（BETA）</strong>：勾选后，给模型提供简化目录树，辅助理解代码库布局，让 AI 更贴合项目结构做响应，尚处测试阶段。</li><li><strong>Full folder contents</strong>：启用后，展示完整文件夹内容而非结构大纲，需详细文件内容时开启，便于深度查看。</li><li><strong>Enable auto - run mode</strong>：允许 Agent 不经确认自动运行工具（如执行命令、写文件），效率高但有风险，需信任场景用，要留意误操作。 <ul><li><strong>Command allowlist</strong>：仅指定命令能自动执行，精准管控，保障安全又保留特定自动操作。</li><li><strong>Command denylist</strong>：列入的命令永不自动执行，规避危险命令，加固安全防线。</li></ul></li><li><strong>Delete file protection</strong>：启用后阻止 Agent 自动删文件，防误删关键文件，保护数据安全。</li><li><strong>MCP tools protection</strong>：开启则 Agent 不能自动运行 MCP 工具，避免工具误操作影响系统。</li><li><strong>Dot files protection</strong>：已勾选，阻止 Agent 自动改点文件（如.gitignore ），保护版本控制等配置文件。</li><li><strong>Outside workspace protection</strong>：勾选后，Agent 无法自动创建 / 修改工作区外文件，防止影响外部系统，保障工作区独立性。</li><li><strong>Dialog ‘Don’t ask again’ preferences</strong>：管理曾选 “不再询问” 的对话框，方便回顾或重置交互确认逻辑。</li><li><strong>Collapse input box pills in pane or editor</strong>：勾选则折叠聊天面板 / 编辑器输入框里的标识，节省空间，让界面更简洁。</li><li><strong>Iterate on lints</strong>：启用后，Agent 模式聊天自动迭代修复代码检查（linter ）错误，助力自动代码优化。</li><li><strong>Hierarchical Cursor Ignore</strong>：启用后，cursorignore 文件规则作用于所有子目录，改配置需重启 Cursor，统一忽略规则时用。</li><li><strong>Auto - accept diffs</strong>：启用后，合成器里的差异（diffs ）在不在工作树中就会被接受，自动处理版本差异，简化流程。</li><li><strong>Custom modes（BETA）</strong>：允许创建自定义模式，可按需定制交互逻辑，尚在测试，探索个性化玩法。</li><li><strong>Play sound on finish（BETA）</strong>：聊天响应完成时播放声音提醒，不用一直盯着，及时知晓结果，测试功能。</li><li><strong>Auto Group Changes（BETA）</strong>：自动分组聊天会话中与大语言模型（LLM ）交互产生的更改，方便集中 review，测试阶段功能。</li><li><strong>Web Search Tool（BETA）</strong>：已勾选，允许 Agent/ask 模式聊天联网搜索信息，补充知识，让回答更全面，测试功能</li></ul><h2 id="_2-3-ctrl-k-内联智能修改" tabindex="-1">2.3 Ctrl+K: 内联智能修改 <a class="header-anchor" href="#_2-3-ctrl-k-内联智能修改" aria-label="Permalink to &quot;2.3 Ctrl+K: 内联智能修改&quot;">​</a></h2><blockquote><p>内联编辑 （Cmd/Ctrl+K） 直接在编辑器窗口中生成新代码或编辑现有代码。</p><p>适合已知并精准修改文件内容！</p></blockquote><p><img src="'+D+'" alt="" data-fancybox="gallery"></p><h3 id="_2-3-1-触发修改提示框" tabindex="-1">2.3.1 触发修改提示框 <a class="header-anchor" href="#_2-3-1-触发修改提示框" aria-label="Permalink to &quot;2.3.1 触发修改提示框&quot;">​</a></h3><p>在 Cursor 中，我们将按 <code>Ctrl/Cmd K</code> 时出现的栏称为“Prompt Bar”。它的工作原理类似于用于聊天的 AI 输入框，可以在其中正常键入，或使用 @引用其他上下文（后续讲解）。</p><p>Cmd K的模式说明：</p><ul><li><strong>内联生成</strong>：如果在按 <code>Ctrl/Cmd K</code> 时未选择任何代码，Cursor 将根据您在提示栏中键入的提示生成新代码。</li><li><strong>内联编辑</strong>：对于就地编辑，只需选择要编辑的代码，然后在提示栏中键入即可。</li></ul><h3 id="_2-3-2-cmd-k-体验" tabindex="-1">2.3.2 Cmd + K 体验 <a class="header-anchor" href="#_2-3-2-cmd-k-体验" aria-label="Permalink to &quot;2.3.2 Cmd + K 体验&quot;">​</a></h3><ul><li><p><strong>内联生成</strong></p><ol><li><p>打开 <code>main.js</code>，光标放文件末尾（无选中代码）</p></li><li><p>按 <code>Cmd/Ctrl + K</code>，输入提示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>生成一个带点击动画的按钮组件，用 JavaScript 实现，点击后控制台打印次数</span></span></code></pre></div></li><li><p>实现效果</p><p><img src="'+v+'" alt="" data-fancybox="gallery"></p></li></ol></li><li><p><strong>内联编辑</strong></p><ol><li><p>继续打开刚刚main.js</p></li><li><p>选中init方法，按 <code>Cmd/Ctrl + K</code>，输入提示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>方法添加注释和每行代码添加注释说明！！</span></span></code></pre></div><p><img src="'+_+'" alt="" data-fancybox="gallery"></p></li><li><p>实现效果</p><p><img src="'+B+'" alt="" data-fancybox="gallery"></p></li></ol></li></ul><h3 id="_2-3-3-terminal-cmd-k-体验" tabindex="-1">2.3.3 Terminal Cmd + K 体验 <a class="header-anchor" href="#_2-3-3-terminal-cmd-k-体验" aria-label="Permalink to &quot;2.3.3 Terminal Cmd + K 体验&quot;">​</a></h3><p>在 Cursor 终端中使用 Cmd K 通过提示栏界面生成和运行命令, 在内置的 Cursor 终端中，您可以按 <code>Ctrl/⌘ K</code> 打开终端底部的提示栏。此提示栏允许您在终端中描述所需的作，终端 Cmd K 将生成一个命令。您可以通过按 <code>esc</code> 接受命令，也可以立即使用 <code>Ctrl/⌘ + Enter</code> 运行命令。</p><p><img src="'+x+'" alt="" data-fancybox="gallery"></p>',98)]))}const K=i(f,[["render",q]]);export{L as __pageData,K as default};
