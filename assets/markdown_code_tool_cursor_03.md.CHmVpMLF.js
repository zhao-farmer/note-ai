import{_ as n,C as p,c as l,o as t,a0 as i,G as h,w as e,a as k}from"./chunks/framework.DqNHTjo5.js";const r="/note-ai/code/tool/cursor/029.png",d="/note-ai/code/tool/cursor/030.png",o="/note-ai/code/tool/cursor/031.png",g="/note-ai/code/tool/cursor/032.png",E="/note-ai/code/tool/cursor/033.png",c="/note-ai/code/tool/cursor/034.png",y="/note-ai/code/tool/cursor/035.png",u="/note-ai/code/tool/cursor/036.png",F="/note-ai/code/tool/cursor/037.png",A="/note-ai/code/tool/cursor/038.png",D="/note-ai/code/tool/cursor/039.png",b="/note-ai/code/tool/cursor/040.png",m="/note-ai/code/tool/cursor/041.png",C="/note-ai/code/tool/cursor/042.png",_="/note-ai/code/tool/cursor/043.png",v="/note-ai/code/tool/cursor/044.png",I=JSON.parse('{"title":"三、Cursor精准上下文指定","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/code/tool/cursor/03.md","filePath":"markdown/code/tool/cursor/03.md"}'),B={name:"markdown/code/tool/cursor/03.md"};function f(x,s,q,w,P,j){const a=p("font");return t(),l("div",null,[s[1]||(s[1]=i('<h1 id="三、cursor精准上下文指定" tabindex="-1">三、Cursor精准上下文指定 <a class="header-anchor" href="#三、cursor精准上下文指定" aria-label="Permalink to &quot;三、Cursor精准上下文指定&quot;">​</a></h1><p>在 Cursor 工具里，“上下文（Context）” 可理解为 <strong>让 AI 准确理解需求、辅助编码的 “信息参考范围”</strong> ，是 AI 读懂代码、精准响应的关键!</p><h2 id="_3-1-codebase-indexing-代码库索引" tabindex="-1">3.1 Codebase Indexing 代码库索引 <a class="header-anchor" href="#_3-1-codebase-indexing-代码库索引" aria-label="Permalink to &quot;3.1 Codebase Indexing 代码库索引&quot;">​</a></h2><h3 id="_3-1-1-概念和作用" tabindex="-1">3.1.1 概念和作用 <a class="header-anchor" href="#_3-1-1-概念和作用" aria-label="Permalink to &quot;3.1.1 概念和作用&quot;">​</a></h3><p>打开项目时，每个 Cursor 实例都将初始化该工作区的索引。初始索引设置完成后，Cursor 将自动为添加到工作区的任何新文件编制索引，以使您的代码库上下文保持最新：</p><ul><li>快速 “读懂” 你的项目结构（哪些是工具文件、哪些是业务逻辑）</li><li>定位相关代码（如搜索 <code>getUser</code> 时，知道优先查 <code>userService.js</code>）</li><li>理解代码关系（如 <code>Order</code> 类和 <code>Product</code> 类的关联）</li></ul><p><strong>Cursor 中的作用</strong>：AI 分析索引内容后，生成代码时会更贴合项目实际（如使用已有工具函数、遵循命名规范）。</p><h3 id="_3-1-2-代码库索引配置和示例" tabindex="-1">3.1.2 代码库索引配置和示例 <a class="header-anchor" href="#_3-1-2-代码库索引配置和示例" aria-label="Permalink to &quot;3.1.2 代码库索引配置和示例&quot;">​</a></h3><p>代码库索引的状态位于 <code>cursor settings &gt; Indexing &amp; Docs</code><img src="'+r+'" alt="" data-fancybox="gallery"></p><p>测试示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>查看当前项目结构，并使用文字图形形式罗列出来！</span></span></code></pre></div><p>展示效果：</p><p><img src="'+d+'" alt="" data-fancybox="gallery"></p><h3 id="_3-1-3-忽略文件配置" tabindex="-1">3.1.3 忽略文件配置 <a class="header-anchor" href="#_3-1-3-忽略文件配置" aria-label="Permalink to &quot;3.1.3 忽略文件配置&quot;">​</a></h3><p>Cursor 读取项目的代码库并为其编制索引以支持其功能。可以通过将 <code>.cursorignore</code> 文件添加到根目录来控制 哪些文件被忽略和Cursor限制访问。</p><ul><li><strong>提升索引速度</strong>：排除大型依赖、生成文件（如 <code>node_modules</code>、<code>dist</code>）</li><li><strong>避免干扰</strong>：某些配置文件可能包含敏感信息或与当前任务无关</li></ul><p>配置 <code>.cursorignore</code>忽略文件：</p><ul><li><p>自己创建 <code>.cursorignore</code> 文件添加到代码库目录的根目录下，并列出要忽略的目录和文件</p></li><li><p>使用cursor配置快捷创建忽略文件 <code>cursor setting &gt; indexing &gt; Configure ignored files</code></p><p><img src="'+o+'" alt="" data-fancybox="gallery"></p></li></ul><p>忽略文件配置测试：</p><ol><li><p>创建忽略文件</p><p><img src="'+g+`" alt="" data-fancybox="gallery"></p></li><li><p>添加忽略配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)</span></span>
<span class="line"><span>index.html</span></span>
<span class="line"><span>style.css</span></span>
<span class="line"><span>main.js</span></span></code></pre></div></li><li><p>测试示例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>查看当前项目结构，并使用文字图形形式罗列出来！</span></span></code></pre></div></li><li><p>效果展示</p><p><img src="`+E+'" alt="" data-fancybox="gallery"></p></li></ol><h2 id="_3-2-rules-规则" tabindex="-1">3.2 Rules 规则 <a class="header-anchor" href="#_3-2-rules-规则" aria-label="Permalink to &quot;3.2 Rules 规则&quot;">​</a></h2><h3 id="_3-2-1-规则介绍" tabindex="-1">3.2.1 规则介绍 <a class="header-anchor" href="#_3-2-1-规则介绍" aria-label="Permalink to &quot;3.2.1 规则介绍&quot;">​</a></h3><p>Rules是给Cursor AI功能（规则适用于 Chat和 Cmd K）生成结果添加规则和限制，让 AI 生成的代码贴合团队规范，减少人工二次修改成本，主要的作用如下：</p><ul><li>可约束代码风格（如强制用驼峰命名、要求函数必须写注释 ）</li><li>能限定技术选型（如禁止使用某老旧库、优先用项目指定工具类 ）</li><li>提前指定核心参数（如提前设置连接数据库的地址和账号密码等）</li></ul><p><strong>Rule主要的配置方案有两种：</strong></p><table tabindex="0"><thead><tr><th><strong>维度</strong></th><th><strong>项目规则（Project Rules）</strong></th><th><strong>用户规则（User Rules）</strong></th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>仅对当前项目生效，团队成员共享相同规则</td><td>对所有项目生效，个人专属配置</td></tr><tr><td><strong>存储位置</strong></td><td>项目根目录下的 <code>.cursor/rules/随意.mdc</code> 文件</td><td>用户配置目录（如 <code>~/.cursor/rules</code>）</td></tr><tr><td><strong>同步方式</strong></td><td>随项目代码提交到版本库（如 Git），团队共享</td><td>仅本地生效，不随项目同步</td></tr><tr><td><strong>适用场景</strong></td><td>统一团队编码规范（如函数注释格式、依赖版本）</td><td>个人习惯（如快捷键、AI 响应风格）</td></tr></tbody></table>',26)),h(a,{color:"red"},{default:e(()=>s[0]||(s[0]=[k("注意： 项目规则和用户规则同时存在并且规则冲突，项目规则优先级更高~~")])),_:1}),s[2]||(s[2]=i('<h3 id="_3-2-2-项目规则配置" tabindex="-1">3.2.2 项目规则配置 <a class="header-anchor" href="#_3-2-2-项目规则配置" aria-label="Permalink to &quot;3.2.2 项目规则配置&quot;">​</a></h3><ol><li><p>项目下创建规则文件</p><ul><li>创建文件夹自定义文件<code>项目/.cursor/rules/随意命名.mdc</code></li><li>快捷命令方式创建 <code>Ctrl + Shift + P</code> &gt; “New Cursor Rule”</li></ul><p><img src="'+c+`" alt="" data-fancybox="gallery"></p></li><li><p>编写项目规则文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>description: &quot;团队前端项目规范&quot;</span></span>
<span class="line"><span>priority: 1000</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 代码风格</span></span>
<span class="line"><span>1. 函数必须包含 JSDoc 注释</span></span>
<span class="line"><span>2. 禁止使用 \`var\`，统一用 \`const\`/\`let\`</span></span>
<span class="line"><span>3. 函数命名必须添加 zwf_前缀， 例如：zwf_login</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 依赖管理</span></span>
<span class="line"><span>- 优先使用项目内已有的工具函数（如 \`utils/request\`）</span></span>
<span class="line"><span>- 禁止引入低版本的 lodash（&lt;4.0.0）</span></span></code></pre></div></li><li><p>项目规则文件生效测试</p><ol><li><p>准备一个main.js文件</p></li><li><p>进入ctrl + k</p></li><li><p>内联生成函数，查看是否规则生效</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>生成两个方法一个登录一个注册！</span></span></code></pre></div></li></ol></li><li><p>项目规则生效效果展示</p><p><img src="`+y+'" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-2-3-用户规则配置" tabindex="-1">3.2.3 用户规则配置 <a class="header-anchor" href="#_3-2-3-用户规则配置" aria-label="Permalink to &quot;3.2.3 用户规则配置&quot;">​</a></h3><ol><li><p>用户规则在<strong>cursor settings &gt; rules</strong>中定义。</p></li><li><p>添加规则内容即可</p></li><li><p>用户规则不支持 MDC，它们只是纯文本。</p><p><img src="'+u+`" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-2-4-mdc语法了解" tabindex="-1">3.2.4 mdc语法了解 <a class="header-anchor" href="#_3-2-4-mdc语法了解" aria-label="Permalink to &quot;3.2.4 mdc语法了解&quot;">​</a></h3><p>Cursor 的 MDC（Markdown with Cursor）语法是专门为编写项目规则设计的轻量级格式，它结合了 Markdown 的可读性和元数据配置能力。接下来，我们来说明下mdc文件语法。</p><h4 id="_3-2-4-1-mdc-文件组成部分" tabindex="-1">3.2.4.1 MDC 文件组成部分： <a class="header-anchor" href="#_3-2-4-1-mdc-文件组成部分" aria-label="Permalink to &quot;3.2.4.1 MDC 文件组成部分：&quot;">​</a></h4><ol><li>前置元数据（Frontmatter） <ul><li>用 <code>---</code> 包裹的 YAML 格式配置</li><li>定义规则的基本属性（如作用范围、优先级）</li></ul></li><li>规则内容（Markdown 正文） <ul><li>用 Markdown 语法写具体规则</li></ul></li></ol><h4 id="_3-2-4-2-前置元数据" tabindex="-1">3.2.4.2 前置元数据 <a class="header-anchor" href="#_3-2-4-2-前置元数据" aria-label="Permalink to &quot;3.2.4.2 前置元数据&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span># 官方约定字段（推荐用，AI 更易理解）</span></span>
<span class="line"><span>description: &quot;前端项目规则&quot;</span></span>
<span class="line"><span>globs: &quot;src/**/*.tsx&quot;</span></span>
<span class="line"><span>priority: 1000</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 自定义字段（自己或团队约定含义）</span></span>
<span class="line"><span>author: &quot;技术团队&quot;</span></span>
<span class="line"><span>review_date: &quot;2025-06-04&quot;</span></span>
<span class="line"><span>special_rule: &quot;仅周一至周五生效&quot;</span></span>
<span class="line"><span>---</span></span></code></pre></div><p>常用元数据字段</p><table tabindex="0"><thead><tr><th>字段</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>description</code></td><td>描述规则用途，指导 AI 如何应用规则</td><td><code>&quot;前端组件编码规范&quot;</code></td></tr><tr><td><code>globs</code></td><td>指定规则生效的文件范围（支持 glob 语法）</td><td><code>&quot;src/**/*.{js,ts,jsx}&quot;</code></td></tr><tr><td><code>priority</code></td><td>规则优先级（数值越大越优先），解决规则冲突</td><td><code>1000</code></td></tr><tr><td><code>version</code></td><td>规则版本号（可选）</td><td><code>&quot;1.0.0&quot;</code></td></tr></tbody></table><h4 id="_3-2-4-3-规则内容-markdown-正文" tabindex="-1">3.2.4.3 规则内容（Markdown 正文） <a class="header-anchor" href="#_3-2-4-3-规则内容-markdown-正文" aria-label="Permalink to &quot;3.2.4.3 规则内容（Markdown 正文）&quot;">​</a></h4><p>用 Markdown 的标题、列表、代码块等语法写具体规则，常见结构：</p><p>代码风格规则（最常用）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 一、代码风格</span></span>
<span class="line"><span>1. 函数必须包含 JSDoc 注释  </span></span>
<span class="line"><span>   - 至少包含 \`@param\` 和 \`@return\` 描述  </span></span>
<span class="line"><span>2. 变量命名必须使用驼峰命名法（camelCase）  </span></span>
<span class="line"><span>3. 每行代码长度不超过 120 个字符  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 二、技术选型</span></span>
<span class="line"><span>- 禁止直接使用原生 fetch，必须通过项目封装的 request 工具  </span></span>
<span class="line"><span>- 优先使用 React Hooks 而非 Class 组件</span></span></code></pre></div><p>安全约束规则</p><div class="language-mdc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mdc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 安全规范</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 禁止使用 eval() 函数  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SQL 查询必须使用参数化查询，防止注入攻击  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 敏感信息（如 API 密钥）必须从环境变量读取</span></span></code></pre></div><p>特殊语法：引用项目文件</p><p>用 <code>@file</code> 引用项目内的配置文件，让 AI 参考：</p><div class="language-mdc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mdc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 工具链配置</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ESLint 规则必须符合 @file .eslintrc.js  </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 测试用例必须遵循 Jest 框架规范</span></span></code></pre></div><h4 id="_3-2-4-4-完整示例-typescript-项目规则" tabindex="-1">3.2.4.4 <strong>完整示例（TypeScript 项目规则）</strong> <a class="header-anchor" href="#_3-2-4-4-完整示例-typescript-项目规则" aria-label="Permalink to &quot;3.2.4.4 **完整示例（TypeScript 项目规则）**&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>description: &quot;TypeScript 项目编码规范&quot;</span></span>
<span class="line"><span>globs: &quot;src/**/*.ts&quot;</span></span>
<span class="line"><span>priority: 1000</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 一、基础规范</span></span>
<span class="line"><span>1. 所有文件必须使用 UTF-8 编码  </span></span>
<span class="line"><span>2. 统一使用 2 空格缩进  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 二、类型约束</span></span>
<span class="line"><span>1. 禁止使用隐式 any 类型  </span></span>
<span class="line"><span>   - 示例：\`const num: number = 123\`（显式）  </span></span>
<span class="line"><span>   - 禁止：\`const num = 123\`（隐式）  </span></span>
<span class="line"><span>2. 接口命名必须以 \`I\` 开头（如 \`interface IUser\`）  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 三、项目约束</span></span>
<span class="line"><span>- 所有 HTTP 请求必须通过 @file src/utils/request.ts 封装的工具  </span></span>
<span class="line"><span>- 状态管理必须使用 Redux Toolkit，禁止直接修改 state</span></span></code></pre></div><h2 id="_3-3-符号" tabindex="-1">3.3 @ 符号 <a class="header-anchor" href="#_3-3-符号" aria-label="Permalink to &quot;3.3 @ 符号&quot;">​</a></h2><p>在 Cursor 中使用 @ 符号在聊天中引用代码、文件、文档和其他上下文的指南，直接更具体的指定上下文环境！</p><p><img src="`+F+`" alt="" data-fancybox="gallery"></p><p>以下是所有可用 @ 符号的列表：</p><ul><li>@Files- 引用项目中的特定文件</li><li>@Folders - 引用整个文件夹以获得更广泛的上下文</li><li>@Code - 引用代码库中的特定代码片段或符号</li><li>@Docs- 访问文档和指南</li><li>@Git- 访问 git 历史记录和更改</li><li>@Past Chats- 使用汇总的 Composer 会话</li><li>@Cursor Rules-使用光标规则</li><li>@Web- 参考外部 Web 资源和文档</li><li>@Lint Errors- 引用 lint 错误（仅限Chat）</li></ul><h3 id="_3-3-1-files使用和测试" tabindex="-1">3.3.1 @Files使用和测试 <a class="header-anchor" href="#_3-3-1-files使用和测试" aria-label="Permalink to &quot;3.3.1 @Files使用和测试&quot;">​</a></h3><ol><li><p>准备测试文件 main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 用户登录方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 登录参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.username</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 用户名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.password</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 登录结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zwf_login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;登录失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 用户注册方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 注册参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.username</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 用户名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.password</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.email</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 邮箱</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 注册结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zwf_register</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;注册失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>测试@File对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>帮我总结下 @main.js 中包含哪些方法？</span></span></code></pre></div></li><li><p>查看对话结果</p><p><img src="`+A+`" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-3-2-code使用和测试" tabindex="-1">3.3.2 @Code使用和测试 <a class="header-anchor" href="#_3-3-2-code使用和测试" aria-label="Permalink to &quot;3.3.2 @Code使用和测试&quot;">​</a></h3><ol><li><p>准备测试文件 main.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 用户登录方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 登录参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.username</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 用户名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.password</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 登录结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zwf_login</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;登录失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 用户注册方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Object}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 注册参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.username</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 用户名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.password</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params.email</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> - 邮箱</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@returns</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {Promise}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 注册结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zwf_register</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/register&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;注册失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li><li><p>测试@Code 对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>帮我逐行解释下 @zwf_register 代码的含义！并且最终在源文件中添加注释！</span></span></code></pre></div></li><li><p>查看对话结果</p><p><img src="`+D+'" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-3-3-docs使用和测试" tabindex="-1">3.3.3 @Docs使用和测试 <a class="header-anchor" href="#_3-3-3-docs使用和测试" aria-label="Permalink to &quot;3.3.3 @Docs使用和测试&quot;">​</a></h3><ol><li><p>@Docs作用说明</p><p><code>@Docs</code> 将 Cursor 连接到来自常用工具和框架的官方文档。当需要以下内容的最新权威信息时，请使用它：</p><ul><li>API 参考：函数签名、参数、返回类型</li><li>入门指南 ：设置、配置、基本用法</li><li>最佳做法 ：源中的推荐模式</li><li>特定于框架的调试 ：官方故障排除指南</li></ul></li><li><p>@Docs对应文档配置</p><p>可以通过<code> cursor settings &gt; features &gt; Docs</code>(cursor近期更新频繁，配置页面会有调整)来进行文档索引配置。粘贴所需文档的 URL 后，将显示以下模式：</p><p><img src="'+b+'" alt="" data-fancybox="gallery"></p><p>地址： <code>https://baomidou.com/introduce/</code> （mybatis-plus的官网测试）</p><ul><li><p>name：一般用于标识文档的名称、简称或唯一识别名，方便在系统里区分不同文档配置。比如这里填<code>MyBatis - plus</code>，就是用框架名称作为文档标识，后续可通过这个<code>name</code>快速找到、关联对应的文档配置。</p></li><li><p>prefix：常指文档 URL 的前缀部分，可用于拼接完整文档路径，或作为统一的基础地址标识。像填的<code>https://baomidou.com</code> ，可能是该框架文档介绍板块的基础前缀，后续若要拼接具体文档子页面路径（如某个功能详细说明路径 ），可以基于这个<code>prefix</code>去扩展，让文档地址管理更规整 。</p></li><li><p>entrypoint：一般是文档的入口地址，即用户访问该文档时最先进入的页面。这里和<code>prefix</code>填了一样的地址，说明<code>https://baomidou.com/introduce/</code> 就是<code>MyBatis - plus</code>文档的起始访问页面，用户通过这个<code>entrypoint</code>能直接进入到对应文档内容开始浏览 。</p></li></ul></li><li><p>测试@Docs对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>基于 @MyBatis-plus 查询下乐观锁插件如何使用</span></span></code></pre></div></li><li><p>查看对话结果</p><p><img src="'+m+'" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-3-4-web使用和测试" tabindex="-1">3.3.4 @Web使用和测试 <a class="header-anchor" href="#_3-3-4-web使用和测试" aria-label="Permalink to &quot;3.3.4 @Web使用和测试&quot;">​</a></h3><ol><li><p>@Web作用说明</p><p><code>@Web</code> 在实时 Internet 上搜索当前信息、博客文章和社区讨论。当您需要时使用它：</p><ul><li>最近的教程 ：社区生成的内容和示例</li><li>比较 ：比较不同方法的文章</li><li>最近更新 ：Very Recent updates or announcement（最近的更新或公告）</li><li>多种视角 ：不同的问题处理方法</li></ul></li><li><p>测试@Web对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Web React 19 的最新性能优化</span></span></code></pre></div></li><li><p>查看对话结果</p><p><img src="'+C+'" alt="" data-fancybox="gallery"></p></li><li><p>对比@Docs和MCP配置</p><p><img src="'+_+`" alt="" data-fancybox="gallery"></p></li></ol><h3 id="_3-3-5-linter-errors使用和测试" tabindex="-1">3.3.5 @Linter Errors使用和测试 <a class="header-anchor" href="#_3-3-5-linter-errors使用和测试" aria-label="Permalink to &quot;3.3.5 @Linter Errors使用和测试&quot;">​</a></h3><ol><li><p>@Linter Errors作用和说明</p><p><code>@Linter Errors</code> 符号会自动捕获并提供有关当前活动文件中的任何 linting 错误和警告的上下文。</p></li><li><p>准备错误代码（BubbleSort.java）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 冒泡排序方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arr</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 待排序的数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.length;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 外层循环控制排序轮数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 内层循环进行相邻元素比较和交换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 如果当前元素大于下一个元素，则交换它们</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 打印数组的辅助方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arr</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 要打印的数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.length; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //此处故意出现错误，会出现数组越界</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 测试数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;排序前的数组：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 执行冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;排序后的数组：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>测试@Lint Errors 对话</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Linter Errors 程序运行报错了，你基于报错信息分析下，并且直接解决下错误！</span></span></code></pre></div></li><li><p>测试结果</p><p><img src="`+v+'" alt="" data-fancybox="gallery"></p></li></ol>',38))])}const T=n(B,[["render",f]]);export{I as __pageData,T as default};
